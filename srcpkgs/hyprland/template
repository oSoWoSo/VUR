# Template file for 'hyprland'
pkgname=hyprland
version=0.34.0
revision=1
build_style=cmake
hostmakedepends="jq git pkg-config glslang hwids meson autoconf mk-configure"
makedepends="
	cairo-devel
	libdisplay-info-devel
	libliftoff
	pango-devel
	wlroots-devel
	xorg-server-xwayland
	ffmpeg-devel
	libdrm-devel
	libglvnd-devel
	libinput-devel
	libseat-devel
	libX11-devel
	libxkbcommon-devel
	pixman-devel
	Vulkan-Headers
	vulkan-loader
	wayland-devel
	wayland-protocols
	xcb-util-renderutil-devel
	xcb-util-errors-devel
	xcb-util-wm-devel
	tomlplusplus
"

depends="
	cairo
	glslang
	libdisplay-info
	libdrm
	libinput
	libliftoff
	libxcb
	libXfixes
	libxkbcommon
	pango
	pixman
	polkit
	Vulkan-ValidationLayers
	vulkan-loader
	wayland>=1.22.0
	wayland-protocols
	xcb-proto
	xcb-util
	xcb-util-errors
	xcb-util-keysyms
	xcb-util-renderutil
	xcb-util-wm
	xorg-server-xwayland
"

short_desc="Dynamic tiling Wayland compositor that doesn't sacrifice on its looks"
maintainer="Makrennel <makrommel@protonmail.ch>"
license="BSD"
homepage="https://hyprland.org/"
changelog="https://github.com/hyprwm/Hyprland/releases"
distfiles="https://github.com/hyprwm/Hyprland/releases/download/v${version}/source-v${version}.tar.gz"
checksum=234500dc726ec6cd190d95d45cf6d04766064172e75c1351ee7c49ec3405497e

if [ "$XBPS_TARGET_LIBC" = musl ]; then
	makedepends+=" libexecinfo-devel"
	depends+=" libexecinfo"
fi

do_build() {
	# build hyprland-specific wlroots
	pushd subprojects/wlroots
	meson build/ --prefix="${wrksrc}/tmpwlr" --buildtype=release
	ninja -C build/
	mkdir -p "${wrksrc}/tmpwlr"
	ninja -C build/ install
	popd

	# build udis86
	pushd subprojects/udis86
	cmake --no-warn-unused-cli -DCMAKE_BUILD_TYPE:STRING=Release -H./ -B./build -G Ninja
	cmake --build ./build --config Release --target all -j${XBPS_MAKEJOBS}
	popd

	#meson subprojects update --reset
	#meson setup build
	#ninja -C build
	#ninja -C build install --tags runtime,man

	# build hyprland
	if [ "$XBPS_TARGET_LIBC" = "musl" ]; then
		cmake --no-warn-unused-cli -DCMAKE_CXX_FLAGS="-lexecinfo -std=c++20" -DCMAKE_BUILD_TYPE:STRING=Release -DNO_SYSTEMD:STRING=true -S . -B ./build -G Ninja
	else
		cmake --no-warn-unused-cli -DCMAKE_CXX_FLAGS="-std=c++20" -DCMAKE_BUILD_TYPE:STRING=Release -DNO_SYSTEMD:STRING=true -S . -B ./build -G Ninja
	fi
	cmake --build ./build --config Release --target all -j${XBPS_MAKEJOBS}

	# build hyprctl
	pushd hyprctl
	make all
	popd
}

do_install() {
	vlicense LICENSE

	# copy headers
	vmkdir usr/include/hyprland
	vmkdir usr/include/hyprland/wlroots
	vmkdir usr/include/hyprland/protocols
	find src -name '*.h*' -exec install -Dm0644 {} ${DESTDIR}/usr/include/hyprland/{} \;
	pushd subprojects/wlroots/include
	find . -name '*.h*' -exec install -Dm0644 {} ${DESTDIR}/usr/include/hyprland/wlroots/{} \;
	popd
	pushd subprojects/wlroots/build/include
	find . -name '*.h*' -exec install -Dm0644 {} ${DESTDIR}/usr/include/hyprland/wlroots/{} \;
	popd
	cp protocols/*-protocol.h ${DESTDIR}/usr/include/hyprland/protocols

	# binaries
	vbin build/Hyprland
	vbin hyprctl/hyprctl

	# assets
	vmkdir usr/share/wayland-sessions
	vmkdir usr/share/hyprland
	vmkdir usr/share/xdg-desktop-portal
	install -Dm0644 assets/*.png ${DESTDIR}/usr/share/hyprland
	vinstall assets/header.svg 644 usr/share/hyprland
	vinstall assets/hyprland-portals.conf 644 usr/share/xdg-desktop-portal
	vinstall example/hyprland.desktop 644 usr/share/wayland-sessions
	vinstall example/hyprland.conf 644 usr/share/hyprland

	# wlroots
	vinstall tmpwlr/lib/libwlroots.so.12032 755 usr/lib
}
